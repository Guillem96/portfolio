---
import GitHub from "./icons/GitHub.astro"
import LinkButton from "./LinkButton.astro"
import { TAGS } from "./Tags.astro"

const baseUrl = import.meta.env.BASE_URL;

const PROJECTS = [
  {
    title: "EfficientDet - Paper Implementation",
    description:
      "EfficientDet is a state-of-the-art object detection model that stands out for its efficiency and accuracy. It utilizes a scalable architecture and compound scaling method, which optimizes the balance between resolution, depth, and width of the network, leading to improved performance with lower computational cost.",
    github: "https://github.com/Guillem96/efficientdet-tf",
    image: baseUrl + "projects/efficientdet.png",
    tags: [TAGS.TENSORFLOW],
  },
  {
    title: "Pointer Neural Network - Paper Implementation",
    description:
      "Pointer Network (Ptr-NN) is a neural network architecture, based on sequence2sequence models, which is able to learn the conditional probability of an output sequence with elements that are discrete tokens corresponding to positions in an input sequence. ",
    github: "https://github.com/Guillem96/pointer-nn-pytorch",
    image: baseUrl + "projects/pointer.png",
    tags: [TAGS.PYTORCH],
  },
  {
    title: "Kitsune Network - Paper Implementation",
    description:
      "KitNET is an online, unsupervised, and efficient anomaly detector. A Kitsune, in Japanese folklore, is a mythical fox-like creature that has a number of tails, can mimic different forms, and whose strength increases with experience. Similarly, Kit-NET has an ensemble of small neural networks (autoencoders), which are trained to mimic (reconstruct) network traffic patterns, and whose performance incrementally improves overtime.",
    github: "https://github.com/Guillem96/kitsune-pytorch",
    image: baseUrl + "projects/kitsune.png",
    tags: [TAGS.PYTORCH],
  },
  {
    title: "One Piece Box Exporter",
    description:
      "Utility for One Piece Treasure Cruise phone game. Export your One Piece characters from your box automatically from screenshots. The project uses object detection + contrastrive learning to match the game characters faces to the original anime characters.",
    github: "https://github.com/Guillem96/optc-box-exporter",
    image: baseUrl + "projects/optcbx.jpg",
    link: "https://www.reddit.com/r/OnePieceTC/comments/jeku8w/optcbx_automatically_export_your_box/",
    tags: [TAGS.PYTORCH, TAGS.DOCKER],
  },
  {
    title: "ArgonNX - Nintendo Switch Hombrew application",
    description:
      "GUI payload chainloader for Nintendo Swtich. The purpose of Argon NX is to stay immutable, so you can always inject it, without caring about other payloads getting updated (Always use ArgonNX for TegraSmash, TegraGUI, TrinkedM0...).",
    github: "https://github.com/Guillem96/argon-nx",
    image: baseUrl + "projects/argonnx.png",
    link: "https://hb-app.store/switch/argon-nx",
    tags: [TAGS.NX],
  },
  {
    title: "ü¶ú‚õìÔ∏è LangChain Contributions",
    description:
      "Contributed to fix low quality code and supporting Amazon Titan Express model as a ChatModel",
    image: baseUrl + "projects/lc.png",
    link: "https://python.langchain.com/docs/get_started/introduction",
    tags: [TAGS.PYTHON],
  },
  {
    title: "Other Open Source Contributions",
    description:
      "I also contributed to many open source projects: For example torchvision, SageMaker SDK, transformers, JAX... See the list of all my PRs clicking the 'See more...' button.",
    link: "https://github.com/pulls?q=is%3Apr+author%3AGuillem96+archived%3Afalse+is%3Aclosed+is%3Apublic+user%3Alangchain-ai+user%3Ahuggingface+user%3Aaws+user%3Apytorch+user%3Agoogle+user%3ACTCaer+user%3Ascikit-fuzzy+user%3Ajakibaki+user%3Aapache",
    tags: [TAGS.PYTHON, TAGS.PYTORCH, TAGS.JAX],
  },
]
---

<section class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
      <article>
        <h3 class="text-2xl font-semibold text-yellow-800 dark:text-yellow-200 mb-2">
          {title}
        </h3>
        <p class="text-lg mb-4 text-pretty">{description}</p>
        <ul class="flex gap-x-2 flex-row mb-4">
          {tags.map((tag) => (
            <li>
              <span
                class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
              >
                <tag.icon class="size-4" />
                {tag.name}
              </span>
            </li>
          ))}
        </ul>
        {image && (<img
          loading="lazy"
          class="rounded shadow-2xl shadow-white/10 aspect-video"
          src={image}
          alt={`Project screenshot ${image}`}
        />)} 
        <footer class="flex gap-x-4 items-end justify-start mt-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              Source Code
            </LinkButton>
          )}
          {link && (<LinkButton href={link}>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <>
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M19.5 7a9 9 0 0 0 -7.5 -4a8.991 8.991 0 0 0 -7.484 4" />
                <path d="M11.5 3a16.989 16.989 0 0 0 -1.826 4" />
                <path d="M12.5 3a16.989 16.989 0 0 1 1.828 4" />
                <path d="M19.5 17a9 9 0 0 1 -7.5 4a8.991 8.991 0 0 1 -7.484 -4" />
                <path d="M11.5 21a16.989 16.989 0 0 1 -1.826 -4" />
                <path d="M12.5 21a16.989 16.989 0 0 0 1.828 -4" />
                <path d="M2 10l1 4l1.5 -4l1.5 4l1 -4" />
                <path d="M17 10l1 4l1.5 -4l1.5 4l1 -4" />
                <path d="M9.5 10l1 4l1.5 -4l1.5 4l1 -4" />
              </>
            </svg>
            See more...
          </LinkButton>)}
          
        </footer>
      </article>
    ))
  }
</section>
